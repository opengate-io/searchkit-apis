import { ImmutableQuery } from "./query";
import { BaseQueryAccessor } from "./accessors";
import { AccessorManager } from "./AccessorManager";
import { ESTransport } from "./transport";
import { SearchRequest } from "./SearchRequest";
import { EventEmitter } from "./support";
export interface SearchkitOptions {
    useHistory?: boolean;
    createHistory?: Function;
    getLocation?: Function;
    searchOnLoad?: boolean;
    httpHeaders?: Object;
    basicAuth?: string;
    transport?: ESTransport;
    searchUrlPath?: string;
    timeout?: number;
}
export declare class SearchkitManager {
    host: string;
    private registrationCompleted;
    completeRegistration: Function;
    state: any;
    translateFunction: Function;
    currentSearchRequest: SearchRequest;
    history: any;
    _unlistenHistory: Function;
    options: SearchkitOptions;
    transport: ESTransport;
    emitter: EventEmitter;
    resultsEmitter: EventEmitter;
    accessors: AccessorManager;
    queryProcessor: Function;
    query: ImmutableQuery;
    loading: boolean;
    initialLoading: boolean;
    error: any;
    results: any;
    VERSION: string;
    static VERSION: string;
    static mock(): SearchkitManager;
    constructor(host: string, options?: SearchkitOptions);
    setupListeners(): void;
    addAccessor(accessor: any): any;
    removeAccessor(accessor: any): void;
    addDefaultQuery(fn: Function): any;
    setQueryProcessor(fn: Function): void;
    translate(key: any): any;
    buildQuery(): any;
    resetState(): void;
    addResultsListener(fn: any): () => void;
    unlistenHistory(): void;
    listenToHistory(): void;
    _searchWhenCompleted(location: any): void;
    runInitialSearch(): void;
    searchFromUrlQuery(query: any): void;
    performSearch(replaceState?: boolean, notifyState?: boolean): void;
    buildSearchUrl(extraParams?: {}): string;
    reloadSearch(): void;
    search(replaceState?: boolean): void;
    _search(): void;
    setResults(results: any): void;
    compareResults(previousResults: any, results: any): void;
    getHits(): any[];
    getHitsCount(): number;
    getTime(): number;
    getSuggestions(): {};
    getQueryAccessor(): BaseQueryAccessor;
    getAccessorsByType(type: any): any[];
    getAccessorByType(type: any): any;
    hasHits(): boolean;
    hasHitsChanged(): boolean;
    setError(error: any): void;
    onResponseChange(): void;
}
